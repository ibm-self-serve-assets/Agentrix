from crewai import Agent, Task, Crew, LLM
from fastapi.responses import StreamingResponse
from dotenv import load_dotenv
from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import asyncio
import uvicorn
import time
import os

# CrewAI event imports
from crewai.utilities.events import LLMStreamChunkEvent
from crewai.utilities.events.base_event_listener import BaseEventListener
app = FastAPI()

# Allow CORS for local development
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Or specify your frontend URL
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

load_dotenv()

# ===== LLM SETUP =====
watsonx = LLM(
    model=os.getenv('LLM_ID','watsonx/meta-llama/llama-3-3-70b-instruct'),
    base_url=os.getenv('WATSONX_URL'),
    project_id=os.getenv('WATSONX_PROJECT_ID'),
    api_key=os.getenv('WATSONX_API_KEY'),
    max_tokens=int(os.getenv('TOKEN_LIMIT',10000)),
    temperature=float(os.getenv('TEMPERATURE',0.42)),
    stream = True
)


disclaimer_section = """
## Disclaimer

- This report is generated by AI based on user-supplied data and current market insights.
- It is not a substitute for personalized advice from licensed financial or tax professionals.
- Please review recommendations in light of your individual circumstances and consult qualified advisors before making decisions.
- The AI adheres to ethical standards and applicable regulations, prioritizing privacy and transparency.
- Use this report as a supportive resource for informed financial decision-making.
"""

# ===== AGENTS (ENHANCED) =====
comprehensive_financial_expert = Agent(
    role="Comprehensive Financial Expert",
    goal=(
        "Extract user financial details, generate an actionable investment allocation and contingency plan, "
        "and synthesize all findings into a professional markdown financial report."
    ),
    backstory=(
        "A senior financial advisor and strategist with deep expertise in data extraction, "
        "portfolio design, contingency planning, and executive financial reporting."
    ),
    llm=watsonx,
    allow_delegation=False,
    verbose=False,
    max_iter=1
)

comprehensive_financial_task = Task(
    description=(
        "{user_query}\n"
        "Given the user's input, generate a markdown financial report with the following sections, using only headings, tables, and bullet points (no narrative text):\n\n"
        "1. **User Profile**\n"
        "   - Present as bullet points: country, currency, earnings, surplus, tenure, risk profile, preferences.\n\n"
        "2. **Complete Allocation Plan**\n"
        "   - Markdown table: Asset Class, Instrument/Entity (with specific stock, bond, REIT, etc. names), Monthly, Annual, Risk, Volatility, ROI, Liquidity, Lock-in, Tax Treatment, Rationale.\n\n"
        "3. **Implementation Guide**\n"
        "   - Bullet points: step-by-step actions for portfolio implementation.\n\n"
        "4. **Alternative Plan**\n"
        "   - Markdown table: Type (e.g., REITs, P2P lending, crypto, commodities, art), Example Entity (e.g., specific REITs, platforms, coins), Rationale, Key Risks.\n\n"
        "5. **Alternative Guide**\n"
        "   - Bullet points: steps to implement alternative investments.\n\n"
        "6. **Tax & Benefits**\n"
        "   - Markdown table: Instrument, Limit, Section, Tax Benefit, Lock-in, Notes.\n"
        "   - Bullet points: tax usage tips and actionable insights.\n\n"
        "7. **Usage Guideline**\n"
        "   - Bullet points: best practices and reminders for using and maintaining the plan.\n\n"
        "8. **Contingency Plan**\n"
        "   - Markdown table: Layer, Instrument, Allocation %, Monthly Amount, Purpose, Access Time, Insurance/Notes.\n\n"
        "9. **Contingency Guide**\n"
        "   - Bullet points: steps for contingency planning and review.\n\n"
        "10. **AI-driven investment suggestion**\n"
        "    - Bullet points: AI-driven investment suggestions, referencing past five years of performance and naming specific stocks/entities across asset classes (e.g., Hindustan Aeronautics, Bajaj Finserv, Titan, Nvidia, Bitcoin, Prosper, Welltower, etc.).\n\n"
        "11. **Do & Don't**\n"
        "    - Bullet points: separate lists for Do and Don't regarding investment and financial planning.\n\n"
        "12. **Disclaimer**\n"
        "    - Bullet points: Concise professional disclaimer stating the report is AI-generated, not a substitute for personalized advice, users should consult qualified professionals, and the AI adheres to ethical standards and regulations.\n"
        "Formatting rules:\n"
        "- No narrative or introductory text.\n"
        "- Do not use phrases like 'The following is...', 'This table shows...', or similar.\n"
        "- Use only headings, tables, and bullet points as required.\n"
    ),
    expected_output=(
        "A markdown-formatted financial report with these sections, in order:\n"
        "- User profile as bullet points.\n"
        "- Complete allocation plan as a table with named stocks/entities.\n"
        "- Implementation guide as bullet points.\n"
        "- Alternative plan as a table with example entities.\n"
        "- Implementation guide as bullet points.\n"
        "- Tax & benefits as a table, plus bullet-pointed usage tips.\n"
        "- Usage guideline as bullet points.\n"
        "- Contingency plan as a table.\n"
        "- Implementation guide as bullet points.\n"
        "- AI-driven investment suggestion as bullet points, naming specific stocks/entities.\n"
        "- Do & Don't Section, Do's and Don't as seperate each with its own heading and bullet-point list.\n"
        "- Disclaimer section as bullet points, concise and professional, as the final section.\n"
        "- No narrative or write-upâ€”only headings, tables, and bullet points.\n"
    ),
    agent=comprehensive_financial_expert
)



# ===== CREW SETUP =====
investment_crew = Crew(
    agents=[comprehensive_financial_expert],
    tasks=[comprehensive_financial_task],
    verbose=False
)


# @app.post("/crewai")
# async def run_crew_process(request: Request):
#     user_input = await request.body()
#     user_input = user_input.decode("utf-8")
#     start = time.time()
#     result = await investment_crew.kickoff_async(inputs={"user_query": user_input})
#     end = time.time() - start
#     print(f"Executed time taken {end} seconds")
#     return JSONResponse(content={"markdown_report": result.raw})

chunk_queue = asyncio.Queue()
main_loop = asyncio.get_event_loop()

class StreamingListener(BaseEventListener):
    def setup_listeners(self, crewai_event_bus):
        @crewai_event_bus.on(LLMStreamChunkEvent)
        def on_llm_stream_chunk(self, event: LLMStreamChunkEvent):
            # Use run_coroutine_threadsafe to submit to the main loop
            asyncio.run_coroutine_threadsafe(chunk_queue.put(event.chunk), main_loop)

# Instantiate the listener (this auto-registers it in most CrewAI versions)
streaming_listener = StreamingListener()

@app.post("/crewai")
async def run_crew_process(request: Request):
    user_input = await request.body()
    user_input = user_input.decode("utf-8")
    while not chunk_queue.empty():
        chunk_queue.get_nowait()
        chunk_queue.task_done()

    async def markdown_stream():
        buffer = ""
        found_final = False
        kickoff_task = asyncio.create_task(
            investment_crew.kickoff_async(inputs={"user_query": user_input})
        )
        try:
            while True:
                if await request.is_disconnected():
                    print("Client disconnected, aborting backend process.")
                    kickoff_task.cancel()
                    break
                chunk = await chunk_queue.get()
                if chunk is None:
                    break
                chunk_queue.task_done()
                if not found_final:
                    buffer += chunk
                    if "Final Answer:" in buffer:
                        found_final = True
                        idx = buffer.index("Final Answer:") + len("Final Answer:")
                        to_yield = buffer[idx:]
                        if to_yield.strip():
                            yield to_yield
                else:
                    yield chunk
        except asyncio.CancelledError:
            print("Markdown stream cancelled")
        finally:
            # Cleanup the queue
            while not chunk_queue.empty():
                chunk_queue.get_nowait()
                chunk_queue.task_done()
            # Await the kickoff_task to ensure proper cancellation
            try:
                if not kickoff_task.cancelled():
                    result = await kickoff_task
                    if hasattr(result, "raw"):
                        yield result.raw
            except asyncio.CancelledError:
                print("Kickoff task cancelled")

    return StreamingResponse(markdown_stream(), media_type="text/markdown")


    

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("app:app", host="0.0.0.0", port=8087 , reload = True)